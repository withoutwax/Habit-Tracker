{"version":3,"sources":["config.js","components/Chart.js","components/Main.js","spreadsheet.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","discoveryDocs","spreadsheetId","scope","Chart","props","React","Component","Main","componentDidMount","window","gapi","load","initClient","client","init","config","then","callback","onLoad","sheets","spreadsheets","values","get","majorDimension","range","response","dates","result","map","date","error","data","setState","state","console","log","this","Footer","PackageJson","version","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"q8BAAe,G,MAAA,CACXA,OAAQ,0CACRC,cAAe,CAAC,4DAChBC,cAAe,+CACfC,MAAO,iD,ICWIC,E,YAZX,WAAYC,GAAQ,qEACVA,I,sEAKN,OACI,0C,GARQC,IAAMC,WCkDXC,E,YA7CX,WAAYH,GAAQ,IAAD,8BACf,4CAAMA,KAMVI,kBAAoB,WAChBC,OAAOC,KAAKC,KAAK,SAAU,EAAKC,aARjB,EAWnBA,WAAa,WAETH,OAAOC,KAAKG,OACPC,KAAK,CACF,OAAUC,EAAOhB,OAEjB,cAAiBgB,EAAOf,gBAG3BgB,KAAK,WCpBX,IAAcC,IDsBA,EAAKC,OCrBtBT,OAAOC,KAAKG,OAAOF,KAAK,SAAU,KAAM,WACpCF,OAAOC,KAAKG,OAAOM,OAAOC,aAAaC,OAClCC,IAAI,CACDrB,cAAec,EAAOd,cACtBsB,eAAgB,UAChBC,MAAO,eAEVR,KACG,SAAAS,GACI,IACMC,EADOD,EAASE,OAAON,OACVO,IAAI,SAAAC,GAAI,MAAK,CAC5BA,KAAMA,MACH,GAEPZ,EAAS,CACLS,WAGR,SAAAD,GACIR,GAAS,EAAOQ,EAASE,OAAOG,cDpB7B,EA0BnBZ,OAAS,SAACa,EAAMD,GACZ,GAAIC,EAAM,CACN,IAAML,EAAQK,EAAKL,MACnB,EAAKM,SAAS,CAAEN,eAEhB,EAAKM,SAAS,CAAEF,WA7BpB,EAAKG,MAAQ,CACTP,MAAO,IAHI,E,sEAqCf,OADAQ,QAAQC,IAAIC,KAAKH,MAAMP,OAEnB,8BACI,kBAAC,EAAD,W,GAxCGrB,IAAMC,W,OEKV+B,MARf,WACI,OACI,gCACI,uCAAaC,EAAYC,WCetBC,E,YAfX,WAAYpC,GAAQ,qEACVA,I,sEAIN,OACI,6BAASqC,UAAU,OACf,6CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVEpC,IAAMC,WCOJoC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.18071e06.chunk.js","sourcesContent":["export default {\n    apiKey: 'AIzaSyCLCz45CHNFypEDbroLWQ-UUqlyggQZH2A',\n    discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n    spreadsheetId: '1azhQyZ5vRlq9DdAKRjEP0usci3v5pBSISKf5oWwCo9c',\n    scope: 'https://www.googleapis.com/auth/spreadsheets'\n}","import React from 'react';\n\nclass Chart extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return(\n            <div>Chart</div>\n        );\n    }\n}\n\nexport default Chart;","import React from 'react';\nimport config from '../config';\nimport { load } from '../spreadsheet';\n\nimport Chart from './Chart';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dates: []\n        }\n    }\n\n    componentDidMount = () => {\n        window.gapi.load('client', this.initClient);\n    }\n\n    initClient = () => {\n        // 2. Initialize the JavaScript client Library\n        window.gapi.client\n            .init({\n                'apiKey': config.apiKey,\n                // Your API key will be automaticlly added to the Discovery Documents URLs.\n                'discoveryDocs': config.discoveryDocs\n                \n            })\n            .then(() => {\n                // 3. Initialize and make the API request.\n                load(this.onLoad);\n        });\n    };\n\n    onLoad = (data, error) => {\n        if (data) {\n            const dates = data.dates;\n            this.setState({ dates });\n        } else {\n            this.setState({ error });\n        }\n    }\n\n    render() {\n        console.log(this.state.dates);\n        return(\n            <main>\n                <Chart />\n            </main>\n        );\n    }\n}\n\nexport default Main;","import config from \"./config\";\n\n/*\n    Load the dates from the spreadsheet\n    Get the right values from it and assign.\n*/\n\nexport function load(callback) {\n    window.gapi.client.load('sheets', 'v4', () => {\n        window.gapi.client.sheets.spreadsheets.values\n            .get({\n                spreadsheetId: config.spreadsheetId,\n                majorDimension: 'COLUMNS',\n                range: 'Sheet1!A:B'\n            })\n            .then(\n                response => {\n                    const data = response.result.values;\n                    const dates = data.map(date => ({\n                        date: date\n                    })) || [];\n\n                    callback({\n                        dates\n                    });\n                },\n                response => {\n                    callback(false, response.result.error);\n                }\n            );\n    });\n}","import React from 'react';\nimport PackageJson from '../../package.json';\n\nfunction Footer() {\n    return(\n        <footer>\n            <p>version v{PackageJson.version}</p>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return ( \n            <section className=\"App\" >\n                <h1>Habit Tracker</h1>\n                <Main />\n                <Footer />\n            </section>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}